{"_objectType":"ITSScreenTemplate","ID":"1690e54d-e470-479a-f23e-1bf978c4d1f1","Description":"Text input","Explanation":"A test input block (single line)","Remarks":"","TemplateVariables":[{"_objectType":"ITSScreenTemplateVariable","ID":"636d2ab0-1994-49a2-83a5-83d291865eb9","variableName":"Description","description":"A description for this dropdown list","defaultValue":"","variableType":"H","translatable":true},{"_objectType":"ITSScreenTemplateVariable","ID":"830a329b-32af-4d36-8ec2-8086e7a01304","variableName":"Placeholder","description":"text to display inside the placeholder","defaultValue":"","variableType":"T","translatable":true},{"_objectType":"ITSScreenTemplateVariable","ID":"c8aa9fd0-e8d9-481f-86b4-d95d796e15e8","variableName":"DescriptionWidth","description":"Width of the description","defaultValue":"3|3,1|1,2|2,4|4,5|5,6|6,7|7,8|8,9|9,10|10,11|11","variableType":"L","translatable":false},{"_objectType":"ITSScreenTemplateVariable","ID":"59533a6d-5c02-4b47-abfe-98a6e454e2a7","variableName":"InputMask","description":"Input mask for this field for numbers, for example 99/99/9999 or 99-999-9999. ","defaultValue":"","variableType":"T","translatable":false},{"_objectType":"ITSScreenTemplateVariable","ID":"4da1aef6-ac9c-4ed9-0144-cf685846ba06","variableName":"Required","description":"Check if an input value is required","defaultValue":"","variableType":"B","translatable":false},{"_objectType":"ITSScreenTemplateVariable","ID":"6d0386d4-35e2-408c-77d9-23fdf64cdf4a","variableName":"RequiredMessage","description":"The message to display if no input is given ","defaultValue":"","variableType":"T","translatable":true}],"HTMLContent":"<div id=\"%%ID%%\" class=\"form-group row\">\n <label for=\"%%ID%%_s\" id=\"%%ID%%_l\" class=\"col-%%DescriptionWidth%% col-form-label\">%%Description%%</label>\n  <div style=\"pointer-events: auto;\" class=\"col-%%12-%%DescriptionWidth%%%%\">\n   <input id=\"%%ID%%_s\" novalidate class=\"form-control\" style=\"pointer-events: auto;\" onkeypress=\"ITSInstance.TextInput_handleMask (event, '%%InputMask%%')\" placeholder=\"%%Placeholder%%\">\n  </div>\n</div>","HTMLContentPnP":"","HTMLContentSummary":"","get_value_snippet":"return $('#'+id+\"_s\")[0].value;","set_value_snippet":"$('#'+id+\"_s\")[0].value = varvalue;\n$('#'+id+\"_s\").attr(\"value\",varvalue);","TemplateType":0,"init_value_snippet":"","generator_snippet":"ITSInstance.TextInput_handleMask = function (event, mask) {\n   if (mask.trim() != \"\") {\n\t   with (event) {\n\t\t\tstopPropagation()\n\t\t\tpreventDefault()\n\t\t\tif (!charCode) return\n\t\t\tvar c = String.fromCharCode(charCode)\n\t\t\tif (c.match(/\\D/)) return\n\t\t\twith (target) {\n\t\t\t\tvar val = value.substring(0, selectionStart) + c + value.substr(selectionEnd)\n\t\t\t\tvar pos = selectionStart + 1\n\t\t\t}\n\t\t}\n\n\t\tvar nan = count(val, /\\D/, pos) \n\t\tval = val.replace(/\\D/g,'')\n\n\t\tvar mask = mask.match(/^(\\D*)(.+9)(\\D*)$/)\n\t\tif (!mask) return \n\t\tif (val.length > count(mask[2], /9/)) return\n\n\t\tfor (var txt='', im=0, iv=0; im<mask[2].length && iv<val.length; im+=1) {\n\t\t\tvar c = mask[2].charAt(im)\n\t\t\ttxt += c.match(/\\D/) ? c : val.charAt(iv++)\n\t\t}\n\n\t\twith (event.target) {\n\t\t\tvalue = mask[1] + txt + mask[3]\n\t\t\tselectionStart = selectionEnd = pos + (pos==1 ? mask[1].length : count(value, /\\D/, pos) - nan)\n\t\t}\n\n\t\tfunction count(str, c, e) {\n\t\t\te = e || str.length\n\t\t\tfor (var n=0, i=0; i<e; i+=1) if (str.charAt(i).match(c)) n+=1\n\t\t\treturn n\n\t\t}\n\t}\n}","generator_pnp_snippet":"ITSInstance.TextInput_handleMask = function (event, mask) {\n   if (mask.trim() != \"\") {\n\t   with (event) {\n\t\t\tstopPropagation()\n\t\t\tpreventDefault()\n\t\t\tif (!charCode) return\n\t\t\tvar c = String.fromCharCode(charCode)\n\t\t\tif (c.match(/\\D/)) return\n\t\t\twith (target) {\n\t\t\t\tvar val = value.substring(0, selectionStart) + c + value.substr(selectionEnd)\n\t\t\t\tvar pos = selectionStart + 1\n\t\t\t}\n\t\t}\n\n\t\tvar nan = count(val, /\\D/, pos) \n\t\tval = val.replace(/\\D/g,'')\n\n\t\tvar mask = mask.match(/^(\\D*)(.+9)(\\D*)$/)\n\t\tif (!mask) return \n\t\tif (val.length > count(mask[2], /9/)) return\n\n\t\tfor (var txt='', im=0, iv=0; im<mask[2].length && iv<val.length; im+=1) {\n\t\t\tvar c = mask[2].charAt(im)\n\t\t\ttxt += c.match(/\\D/) ? c : val.charAt(iv++)\n\t\t}\n\n\t\twith (event.target) {\n\t\t\tvalue = mask[1] + txt + mask[3]\n\t\t\tselectionStart = selectionEnd = pos + (pos==1 ? mask[1].length : count(value, /\\D/, pos) - nan)\n\t\t}\n\n\t\tfunction count(str, c, e) {\n\t\t\te = e || str.length\n\t\t\tfor (var n=0, i=0; i<e; i+=1) if (str.charAt(i).match(c)) n+=1\n\t\t\treturn n\n\t\t}\n\t}\n}","generator_summary_snippet":"","get_value_as_html_snippet":"","validation_snippet":"if (template_values.Required) {\n if (template_values.Required == \"T\") {\n var val = this.runtime_get_values(id, num_blocks);\n if (val == -1) {\n  return template_values.RequiredMessage;\n  }\n }\n}\nreturn \"\";","isanswered_snippet":"try{\nreturn ((runtime_values.Value != \"\") && ((runtime_values.Value != \"-\")));\n} catch(err) {};\n\nreturn false;","PluginData":{"_objectType":"ITSObject","persistentProperties":"*ALL*"}}