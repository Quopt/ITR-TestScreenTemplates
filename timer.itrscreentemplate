{
	"_objectType": "ITSScreenTemplate",
	"ID": "f33ad135-635b-4282-e738-316297f30fe9",
	"Description": "Timer",
	"Explanation": "",
	"Remarks": "",
	"TemplateVariables": [
		{
			"_objectType": "ITSScreenTemplateVariable",
			"ID": "0d171773-1742-4cb7-5345-8c68c04782a1",
			"variableName": "StartValue",
			"description": "Start value of the timer in seconds",
			"defaultValue": "60",
			"variableType": "T",
			"translatable": false
		},
		{
			"_objectType": "ITSScreenTemplateVariable",
			"ID": "0fb9c2a1-4876-4354-92fe-26a221fde620",
			"variableName": "CountUp",
			"description": "Normally counters count down to zero, switch this on to make the counter count up",
			"defaultValue": "",
			"variableType": "B",
			"translatable": false
		},
		{
			"_objectType": "ITSScreenTemplateVariable",
			"ID": "9777b0b0-7660-4b9f-c109-3c132b837129",
			"variableName": "Action",
			"description": "Action when counter reaches zero",
			"defaultValue": "None|None,Store|Store the currently entered values,EndTest|End the test,EndTestTimeOut|End the test because of a time out,EndSession|End the session,NextScreen|Goto the next screen in the test,NextUnansweredScreen|Goto the next unanswered screen in the test,PreviousScreen|Goto the previous screen in the test,GotoScreen|Goto a specific screen in the test,Logout|Logout after saving the currently entered values",
			"variableType": "L",
			"translatable": false
		},
		{
			"_objectType": "ITSScreenTemplateVariable",
			"ID": "70e059fb-33bf-46c2-1820-64a84f18c7a4",
			"variableName": "ActionParameter",
			"description": "parameter for the action (optional)",
			"defaultValue": "",
			"variableType": "T",
			"translatable": false
		},
		{
			"_objectType": "ITSScreenTemplateVariable",
			"ID": "eee44ba5-26c1-4e8e-437b-caf93fd1490a",
			"variableName": "FontColor",
			"description": "",
			"defaultValue": "000000",
			"variableType": "C",
			"translatable": false
		},
		{
			"_objectType": "ITSScreenTemplateVariable",
			"ID": "f95f78bc-4b40-45a2-c882-d7d0d2514238",
			"variableName": "BackgroundColor",
			"description": "",
			"defaultValue": "",
			"variableType": "C",
			"translatable": false
		},
		{
			"_objectType": "ITSScreenTemplateVariable",
			"ID": "6247e9d6-6ae3-4a21-300d-62e0c1fb600a",
			"variableName": "FontSize",
			"description": "",
			"defaultValue": "12",
			"variableType": "T",
			"translatable": false
		}
	],
	"HTMLContent": "<span id=\"%%ID%%\" style=\"background-color:#%%BackgroundColor%%; color:#%%FontColor%%; font-size: %%FontSize%%pt\"></span>",
	"HTMLContentPnP": "",
	"get_value_snippet": "return template_values.currentTimerValue;",
	"set_value_snippet": "template_values.currentTimerValue = varvalue;\n\nITSInstance.TimerTemplateFormatValue(id, varvalue);",
	"TemplateType": 0,
	"init_value_snippet": "console.log(id, num_blocks, test_mode, template_values);\n\nITSInstance.TimerTemplate = function (id, test_mode, timerValue, template_values) {\n\n var tempVal = template_values.currentTimerValue;\n if ($('#'+ id).length == 0) { return; }\n if ((tempVal != undefined) && (tempVal != \"\")) {\n  timerValue =  template_values.currentTimerValue ;\n }\n if (template_values.CountUp == \"F\") {\n  console.log(timerValue);\n  newTimerValue = Number(timerValue) - 1; \n } else {\n  newTimerValue = Number(timerValue) + 1; \n }\n\n var date = new Date(); \n var reraise = true;\n var lastTimerEvent = template_values.mx_interval;\n if (lastTimerEvent == undefined) {\n  lastTimerEvent = date.getTime();\n } else {\n  if (date.getTime() - lastTimerEvent >= 1000) {\n\t  lastTimerEvent = date.getTime();\n  } else {\n\t  reraise = false;\n  }\n }\n  \n if (newTimerValue > 0) {\n  if (reraise) {\n    template_values.mx_interval = lastTimerEvent;\n    template_values.currentTimerValue = newTimerValue;\n    setTimeout(ITSInstance.TimerTemplate.bind(this, id, test_mode, newTimerValue, template_values), 1000); \n    ITSInstance.TimerTemplateFormatValue(id, newTimerValue);\n    if (newTimerValue % 10 == 0) {\n     processEvent(\"Store\",\"\");\n    }\n  }\n } else {\n  if (reraise) {\n   processEvent(template_values.Action,template_values.ActionParameter);\n   }\n }\n};\n\nITSInstance.TimerTemplateFormatValue = function (id, newval) { \n newval = Number(newval);\n var seconds = newval % 60 ; \n newval = newval - seconds; \n var minutes = (newval % (60*60)) / 60 ;\n newval = newval - (minutes * 60); \n var hours = ( newval % (60*60*60)) / (60*60);\n  \n if ( hours <= 9) { hours = \"0\" + hours; }\n if ( minutes <= 9) { minutes = \"0\" + minutes ; }\n if ( seconds <= 9) { seconds = \"0\" + seconds ; }\n $('#'+ id).text(hours + \":\"+ minutes + \":\" + seconds);\n}\n\nif (test_mode == \"TT\" || test_mode == \"ST\") {\n ITSInstance.TimerTemplate(id, test_mode, template_values.StartValue,  template_values); \n}",
	"generator_snippet": "",
	"generator_pnp_snippet": "",
	"validation_snippet": "",
	"isanswered_snippet": "return true;",
	"PluginData": {
		"_objectType": "ITSObject",
		"persistentProperties": "*ALL*"
	}
}
